tatic, protected and private are keywords used to describe the accessibility of a method or property in OOP. Through the use of these keywords, you can control the level of access to the specified method/properties and each keyword has their own unique use-case. The static keyword is a member that is associated with the class instead of the instance of the class. What this means is that a developer can access it without the need of creating an instance. A protected member on the other hand is accessible within the class and any child classes. A protected member can only be accessed by code that is apart of the class hierarchy meaning that any code outside of the hierarchy cannot access the protected member. Lastly, a private element is one that is only accessible within the class meaning that any code outside of the class including child classes will be able to access it.

Static members are usually used for methods or properties that do not depend on the state of an object and static methods can be called directly from the class. Protected members are useful for allowing child classes to have access to the methods/properties that are needed in order to function correctly all while keeping it hidden from other code. Private member is of course most useful for hiding details and information that aren't meant to be exposed to other code in order to encapsulate the behavior. These three members are all apart of a developers utility belt to give us more control when it comes to the accessibility of code and in the end allows us to keep our code much more organized and maintainable. 